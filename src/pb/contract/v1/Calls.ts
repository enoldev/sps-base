// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Usdc_ApproveCall } from "./Usdc_ApproveCall";
import { Usdc_BlacklistCall } from "./Usdc_BlacklistCall";
import { Usdc_BurnCall } from "./Usdc_BurnCall";
import { Usdc_CancelAuthorization1call } from "./Usdc_CancelAuthorization1call";
import { Usdc_CancelAuthorization2call } from "./Usdc_CancelAuthorization2call";
import { Usdc_ChangeAdminCall } from "./Usdc_ChangeAdminCall";
import { Usdc_ConfigureMinterCall } from "./Usdc_ConfigureMinterCall";
import { Usdc_DecreaseAllowanceCall } from "./Usdc_DecreaseAllowanceCall";
import { Usdc_IncreaseAllowanceCall } from "./Usdc_IncreaseAllowanceCall";
import { Usdc_InitializeCall } from "./Usdc_InitializeCall";
import { Usdc_InitializeV2call } from "./Usdc_InitializeV2call";
import { Usdc_InitializeV21call } from "./Usdc_InitializeV21call";
import { Usdc_InitializeV22call } from "./Usdc_InitializeV22call";
import { Usdc_MintCall } from "./Usdc_MintCall";
import { Usdc_PauseCall } from "./Usdc_PauseCall";
import { Usdc_Permit1call } from "./Usdc_Permit1call";
import { Usdc_Permit2call } from "./Usdc_Permit2call";
import { Usdc_ReceiveWithAuthorization1call } from "./Usdc_ReceiveWithAuthorization1call";
import { Usdc_ReceiveWithAuthorization2call } from "./Usdc_ReceiveWithAuthorization2call";
import { Usdc_RemoveMinterCall } from "./Usdc_RemoveMinterCall";
import { Usdc_RescueErc20call } from "./Usdc_RescueErc20call";
import { Usdc_TransferCall } from "./Usdc_TransferCall";
import { Usdc_TransferFromCall } from "./Usdc_TransferFromCall";
import { Usdc_TransferOwnershipCall } from "./Usdc_TransferOwnershipCall";
import { Usdc_TransferWithAuthorization1call } from "./Usdc_TransferWithAuthorization1call";
import { Usdc_TransferWithAuthorization2call } from "./Usdc_TransferWithAuthorization2call";
import { Usdc_UnBlacklistCall } from "./Usdc_UnBlacklistCall";
import { Usdc_UnpauseCall } from "./Usdc_UnpauseCall";
import { Usdc_UpdateBlacklisterCall } from "./Usdc_UpdateBlacklisterCall";
import { Usdc_UpdateMasterMinterCall } from "./Usdc_UpdateMasterMinterCall";
import { Usdc_UpdatePauserCall } from "./Usdc_UpdatePauserCall";
import { Usdc_UpdateRescuerCall } from "./Usdc_UpdateRescuerCall";
import { Usdc_UpgradeToCall } from "./Usdc_UpgradeToCall";
import { Usdc_UpgradeToAndCallCall } from "./Usdc_UpgradeToAndCallCall";

export class Calls {
  static encode(message: Calls, writer: Writer): void {
    const usdcCallApproves = message.usdcCallApproves;
    for (let i: i32 = 0; i < usdcCallApproves.length; ++i) {
      writer.uint32(10);
      writer.fork();
      Usdc_ApproveCall.encode(usdcCallApproves[i], writer);
      writer.ldelim();
    }

    const usdcCallBlacklists = message.usdcCallBlacklists;
    for (let i: i32 = 0; i < usdcCallBlacklists.length; ++i) {
      writer.uint32(18);
      writer.fork();
      Usdc_BlacklistCall.encode(usdcCallBlacklists[i], writer);
      writer.ldelim();
    }

    const usdcCallBurns = message.usdcCallBurns;
    for (let i: i32 = 0; i < usdcCallBurns.length; ++i) {
      writer.uint32(26);
      writer.fork();
      Usdc_BurnCall.encode(usdcCallBurns[i], writer);
      writer.ldelim();
    }

    const usdcCallCancelAuthorization1s = message.usdcCallCancelAuthorization1s;
    for (let i: i32 = 0; i < usdcCallCancelAuthorization1s.length; ++i) {
      writer.uint32(34);
      writer.fork();
      Usdc_CancelAuthorization1call.encode(
        usdcCallCancelAuthorization1s[i],
        writer
      );
      writer.ldelim();
    }

    const usdcCallCancelAuthorization2s = message.usdcCallCancelAuthorization2s;
    for (let i: i32 = 0; i < usdcCallCancelAuthorization2s.length; ++i) {
      writer.uint32(42);
      writer.fork();
      Usdc_CancelAuthorization2call.encode(
        usdcCallCancelAuthorization2s[i],
        writer
      );
      writer.ldelim();
    }

    const usdcCallChangeAdmins = message.usdcCallChangeAdmins;
    for (let i: i32 = 0; i < usdcCallChangeAdmins.length; ++i) {
      writer.uint32(50);
      writer.fork();
      Usdc_ChangeAdminCall.encode(usdcCallChangeAdmins[i], writer);
      writer.ldelim();
    }

    const usdcCallConfigureMinters = message.usdcCallConfigureMinters;
    for (let i: i32 = 0; i < usdcCallConfigureMinters.length; ++i) {
      writer.uint32(58);
      writer.fork();
      Usdc_ConfigureMinterCall.encode(usdcCallConfigureMinters[i], writer);
      writer.ldelim();
    }

    const usdcCallDecreaseAllowances = message.usdcCallDecreaseAllowances;
    for (let i: i32 = 0; i < usdcCallDecreaseAllowances.length; ++i) {
      writer.uint32(66);
      writer.fork();
      Usdc_DecreaseAllowanceCall.encode(usdcCallDecreaseAllowances[i], writer);
      writer.ldelim();
    }

    const usdcCallIncreaseAllowances = message.usdcCallIncreaseAllowances;
    for (let i: i32 = 0; i < usdcCallIncreaseAllowances.length; ++i) {
      writer.uint32(74);
      writer.fork();
      Usdc_IncreaseAllowanceCall.encode(usdcCallIncreaseAllowances[i], writer);
      writer.ldelim();
    }

    const usdcCallInitializes = message.usdcCallInitializes;
    for (let i: i32 = 0; i < usdcCallInitializes.length; ++i) {
      writer.uint32(82);
      writer.fork();
      Usdc_InitializeCall.encode(usdcCallInitializes[i], writer);
      writer.ldelim();
    }

    const usdcCallInitializeV2s = message.usdcCallInitializeV2s;
    for (let i: i32 = 0; i < usdcCallInitializeV2s.length; ++i) {
      writer.uint32(90);
      writer.fork();
      Usdc_InitializeV2call.encode(usdcCallInitializeV2s[i], writer);
      writer.ldelim();
    }

    const usdcCallInitializeV21s = message.usdcCallInitializeV21s;
    for (let i: i32 = 0; i < usdcCallInitializeV21s.length; ++i) {
      writer.uint32(98);
      writer.fork();
      Usdc_InitializeV21call.encode(usdcCallInitializeV21s[i], writer);
      writer.ldelim();
    }

    const usdcCallInitializeV22s = message.usdcCallInitializeV22s;
    for (let i: i32 = 0; i < usdcCallInitializeV22s.length; ++i) {
      writer.uint32(106);
      writer.fork();
      Usdc_InitializeV22call.encode(usdcCallInitializeV22s[i], writer);
      writer.ldelim();
    }

    const usdcCallMints = message.usdcCallMints;
    for (let i: i32 = 0; i < usdcCallMints.length; ++i) {
      writer.uint32(114);
      writer.fork();
      Usdc_MintCall.encode(usdcCallMints[i], writer);
      writer.ldelim();
    }

    const usdcCallPauses = message.usdcCallPauses;
    for (let i: i32 = 0; i < usdcCallPauses.length; ++i) {
      writer.uint32(122);
      writer.fork();
      Usdc_PauseCall.encode(usdcCallPauses[i], writer);
      writer.ldelim();
    }

    const usdcCallPermit1s = message.usdcCallPermit1s;
    for (let i: i32 = 0; i < usdcCallPermit1s.length; ++i) {
      writer.uint32(130);
      writer.fork();
      Usdc_Permit1call.encode(usdcCallPermit1s[i], writer);
      writer.ldelim();
    }

    const usdcCallPermit2s = message.usdcCallPermit2s;
    for (let i: i32 = 0; i < usdcCallPermit2s.length; ++i) {
      writer.uint32(138);
      writer.fork();
      Usdc_Permit2call.encode(usdcCallPermit2s[i], writer);
      writer.ldelim();
    }

    const usdcCallReceiveWithAuthorization1s =
      message.usdcCallReceiveWithAuthorization1s;
    for (let i: i32 = 0; i < usdcCallReceiveWithAuthorization1s.length; ++i) {
      writer.uint32(146);
      writer.fork();
      Usdc_ReceiveWithAuthorization1call.encode(
        usdcCallReceiveWithAuthorization1s[i],
        writer
      );
      writer.ldelim();
    }

    const usdcCallReceiveWithAuthorization2s =
      message.usdcCallReceiveWithAuthorization2s;
    for (let i: i32 = 0; i < usdcCallReceiveWithAuthorization2s.length; ++i) {
      writer.uint32(154);
      writer.fork();
      Usdc_ReceiveWithAuthorization2call.encode(
        usdcCallReceiveWithAuthorization2s[i],
        writer
      );
      writer.ldelim();
    }

    const usdcCallRemoveMinters = message.usdcCallRemoveMinters;
    for (let i: i32 = 0; i < usdcCallRemoveMinters.length; ++i) {
      writer.uint32(162);
      writer.fork();
      Usdc_RemoveMinterCall.encode(usdcCallRemoveMinters[i], writer);
      writer.ldelim();
    }

    const usdcCallRescueErc20s = message.usdcCallRescueErc20s;
    for (let i: i32 = 0; i < usdcCallRescueErc20s.length; ++i) {
      writer.uint32(170);
      writer.fork();
      Usdc_RescueErc20call.encode(usdcCallRescueErc20s[i], writer);
      writer.ldelim();
    }

    const usdcCallTransfers = message.usdcCallTransfers;
    for (let i: i32 = 0; i < usdcCallTransfers.length; ++i) {
      writer.uint32(178);
      writer.fork();
      Usdc_TransferCall.encode(usdcCallTransfers[i], writer);
      writer.ldelim();
    }

    const usdcCallTransferFroms = message.usdcCallTransferFroms;
    for (let i: i32 = 0; i < usdcCallTransferFroms.length; ++i) {
      writer.uint32(186);
      writer.fork();
      Usdc_TransferFromCall.encode(usdcCallTransferFroms[i], writer);
      writer.ldelim();
    }

    const usdcCallTransferOwnerships = message.usdcCallTransferOwnerships;
    for (let i: i32 = 0; i < usdcCallTransferOwnerships.length; ++i) {
      writer.uint32(194);
      writer.fork();
      Usdc_TransferOwnershipCall.encode(usdcCallTransferOwnerships[i], writer);
      writer.ldelim();
    }

    const usdcCallTransferWithAuthorization1s =
      message.usdcCallTransferWithAuthorization1s;
    for (let i: i32 = 0; i < usdcCallTransferWithAuthorization1s.length; ++i) {
      writer.uint32(202);
      writer.fork();
      Usdc_TransferWithAuthorization1call.encode(
        usdcCallTransferWithAuthorization1s[i],
        writer
      );
      writer.ldelim();
    }

    const usdcCallTransferWithAuthorization2s =
      message.usdcCallTransferWithAuthorization2s;
    for (let i: i32 = 0; i < usdcCallTransferWithAuthorization2s.length; ++i) {
      writer.uint32(210);
      writer.fork();
      Usdc_TransferWithAuthorization2call.encode(
        usdcCallTransferWithAuthorization2s[i],
        writer
      );
      writer.ldelim();
    }

    const usdcCallUnBlacklists = message.usdcCallUnBlacklists;
    for (let i: i32 = 0; i < usdcCallUnBlacklists.length; ++i) {
      writer.uint32(218);
      writer.fork();
      Usdc_UnBlacklistCall.encode(usdcCallUnBlacklists[i], writer);
      writer.ldelim();
    }

    const usdcCallUnpauses = message.usdcCallUnpauses;
    for (let i: i32 = 0; i < usdcCallUnpauses.length; ++i) {
      writer.uint32(226);
      writer.fork();
      Usdc_UnpauseCall.encode(usdcCallUnpauses[i], writer);
      writer.ldelim();
    }

    const usdcCallUpdateBlacklisters = message.usdcCallUpdateBlacklisters;
    for (let i: i32 = 0; i < usdcCallUpdateBlacklisters.length; ++i) {
      writer.uint32(234);
      writer.fork();
      Usdc_UpdateBlacklisterCall.encode(usdcCallUpdateBlacklisters[i], writer);
      writer.ldelim();
    }

    const usdcCallUpdateMasterMinters = message.usdcCallUpdateMasterMinters;
    for (let i: i32 = 0; i < usdcCallUpdateMasterMinters.length; ++i) {
      writer.uint32(242);
      writer.fork();
      Usdc_UpdateMasterMinterCall.encode(
        usdcCallUpdateMasterMinters[i],
        writer
      );
      writer.ldelim();
    }

    const usdcCallUpdatePausers = message.usdcCallUpdatePausers;
    for (let i: i32 = 0; i < usdcCallUpdatePausers.length; ++i) {
      writer.uint32(250);
      writer.fork();
      Usdc_UpdatePauserCall.encode(usdcCallUpdatePausers[i], writer);
      writer.ldelim();
    }

    const usdcCallUpdateRescuers = message.usdcCallUpdateRescuers;
    for (let i: i32 = 0; i < usdcCallUpdateRescuers.length; ++i) {
      writer.uint32(258);
      writer.fork();
      Usdc_UpdateRescuerCall.encode(usdcCallUpdateRescuers[i], writer);
      writer.ldelim();
    }

    const usdcCallUpgradeTos = message.usdcCallUpgradeTos;
    for (let i: i32 = 0; i < usdcCallUpgradeTos.length; ++i) {
      writer.uint32(266);
      writer.fork();
      Usdc_UpgradeToCall.encode(usdcCallUpgradeTos[i], writer);
      writer.ldelim();
    }

    const usdcCallUpgradeToAndCalls = message.usdcCallUpgradeToAndCalls;
    for (let i: i32 = 0; i < usdcCallUpgradeToAndCalls.length; ++i) {
      writer.uint32(274);
      writer.fork();
      Usdc_UpgradeToAndCallCall.encode(usdcCallUpgradeToAndCalls[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Calls {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Calls();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.usdcCallApproves.push(
            Usdc_ApproveCall.decode(reader, reader.uint32())
          );
          break;

        case 2:
          message.usdcCallBlacklists.push(
            Usdc_BlacklistCall.decode(reader, reader.uint32())
          );
          break;

        case 3:
          message.usdcCallBurns.push(
            Usdc_BurnCall.decode(reader, reader.uint32())
          );
          break;

        case 4:
          message.usdcCallCancelAuthorization1s.push(
            Usdc_CancelAuthorization1call.decode(reader, reader.uint32())
          );
          break;

        case 5:
          message.usdcCallCancelAuthorization2s.push(
            Usdc_CancelAuthorization2call.decode(reader, reader.uint32())
          );
          break;

        case 6:
          message.usdcCallChangeAdmins.push(
            Usdc_ChangeAdminCall.decode(reader, reader.uint32())
          );
          break;

        case 7:
          message.usdcCallConfigureMinters.push(
            Usdc_ConfigureMinterCall.decode(reader, reader.uint32())
          );
          break;

        case 8:
          message.usdcCallDecreaseAllowances.push(
            Usdc_DecreaseAllowanceCall.decode(reader, reader.uint32())
          );
          break;

        case 9:
          message.usdcCallIncreaseAllowances.push(
            Usdc_IncreaseAllowanceCall.decode(reader, reader.uint32())
          );
          break;

        case 10:
          message.usdcCallInitializes.push(
            Usdc_InitializeCall.decode(reader, reader.uint32())
          );
          break;

        case 11:
          message.usdcCallInitializeV2s.push(
            Usdc_InitializeV2call.decode(reader, reader.uint32())
          );
          break;

        case 12:
          message.usdcCallInitializeV21s.push(
            Usdc_InitializeV21call.decode(reader, reader.uint32())
          );
          break;

        case 13:
          message.usdcCallInitializeV22s.push(
            Usdc_InitializeV22call.decode(reader, reader.uint32())
          );
          break;

        case 14:
          message.usdcCallMints.push(
            Usdc_MintCall.decode(reader, reader.uint32())
          );
          break;

        case 15:
          message.usdcCallPauses.push(
            Usdc_PauseCall.decode(reader, reader.uint32())
          );
          break;

        case 16:
          message.usdcCallPermit1s.push(
            Usdc_Permit1call.decode(reader, reader.uint32())
          );
          break;

        case 17:
          message.usdcCallPermit2s.push(
            Usdc_Permit2call.decode(reader, reader.uint32())
          );
          break;

        case 18:
          message.usdcCallReceiveWithAuthorization1s.push(
            Usdc_ReceiveWithAuthorization1call.decode(reader, reader.uint32())
          );
          break;

        case 19:
          message.usdcCallReceiveWithAuthorization2s.push(
            Usdc_ReceiveWithAuthorization2call.decode(reader, reader.uint32())
          );
          break;

        case 20:
          message.usdcCallRemoveMinters.push(
            Usdc_RemoveMinterCall.decode(reader, reader.uint32())
          );
          break;

        case 21:
          message.usdcCallRescueErc20s.push(
            Usdc_RescueErc20call.decode(reader, reader.uint32())
          );
          break;

        case 22:
          message.usdcCallTransfers.push(
            Usdc_TransferCall.decode(reader, reader.uint32())
          );
          break;

        case 23:
          message.usdcCallTransferFroms.push(
            Usdc_TransferFromCall.decode(reader, reader.uint32())
          );
          break;

        case 24:
          message.usdcCallTransferOwnerships.push(
            Usdc_TransferOwnershipCall.decode(reader, reader.uint32())
          );
          break;

        case 25:
          message.usdcCallTransferWithAuthorization1s.push(
            Usdc_TransferWithAuthorization1call.decode(reader, reader.uint32())
          );
          break;

        case 26:
          message.usdcCallTransferWithAuthorization2s.push(
            Usdc_TransferWithAuthorization2call.decode(reader, reader.uint32())
          );
          break;

        case 27:
          message.usdcCallUnBlacklists.push(
            Usdc_UnBlacklistCall.decode(reader, reader.uint32())
          );
          break;

        case 28:
          message.usdcCallUnpauses.push(
            Usdc_UnpauseCall.decode(reader, reader.uint32())
          );
          break;

        case 29:
          message.usdcCallUpdateBlacklisters.push(
            Usdc_UpdateBlacklisterCall.decode(reader, reader.uint32())
          );
          break;

        case 30:
          message.usdcCallUpdateMasterMinters.push(
            Usdc_UpdateMasterMinterCall.decode(reader, reader.uint32())
          );
          break;

        case 31:
          message.usdcCallUpdatePausers.push(
            Usdc_UpdatePauserCall.decode(reader, reader.uint32())
          );
          break;

        case 32:
          message.usdcCallUpdateRescuers.push(
            Usdc_UpdateRescuerCall.decode(reader, reader.uint32())
          );
          break;

        case 33:
          message.usdcCallUpgradeTos.push(
            Usdc_UpgradeToCall.decode(reader, reader.uint32())
          );
          break;

        case 34:
          message.usdcCallUpgradeToAndCalls.push(
            Usdc_UpgradeToAndCallCall.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  usdcCallApproves: Array<Usdc_ApproveCall>;
  usdcCallBlacklists: Array<Usdc_BlacklistCall>;
  usdcCallBurns: Array<Usdc_BurnCall>;
  usdcCallCancelAuthorization1s: Array<Usdc_CancelAuthorization1call>;
  usdcCallCancelAuthorization2s: Array<Usdc_CancelAuthorization2call>;
  usdcCallChangeAdmins: Array<Usdc_ChangeAdminCall>;
  usdcCallConfigureMinters: Array<Usdc_ConfigureMinterCall>;
  usdcCallDecreaseAllowances: Array<Usdc_DecreaseAllowanceCall>;
  usdcCallIncreaseAllowances: Array<Usdc_IncreaseAllowanceCall>;
  usdcCallInitializes: Array<Usdc_InitializeCall>;
  usdcCallInitializeV2s: Array<Usdc_InitializeV2call>;
  usdcCallInitializeV21s: Array<Usdc_InitializeV21call>;
  usdcCallInitializeV22s: Array<Usdc_InitializeV22call>;
  usdcCallMints: Array<Usdc_MintCall>;
  usdcCallPauses: Array<Usdc_PauseCall>;
  usdcCallPermit1s: Array<Usdc_Permit1call>;
  usdcCallPermit2s: Array<Usdc_Permit2call>;
  usdcCallReceiveWithAuthorization1s: Array<Usdc_ReceiveWithAuthorization1call>;
  usdcCallReceiveWithAuthorization2s: Array<Usdc_ReceiveWithAuthorization2call>;
  usdcCallRemoveMinters: Array<Usdc_RemoveMinterCall>;
  usdcCallRescueErc20s: Array<Usdc_RescueErc20call>;
  usdcCallTransfers: Array<Usdc_TransferCall>;
  usdcCallTransferFroms: Array<Usdc_TransferFromCall>;
  usdcCallTransferOwnerships: Array<Usdc_TransferOwnershipCall>;
  usdcCallTransferWithAuthorization1s: Array<Usdc_TransferWithAuthorization1call>;
  usdcCallTransferWithAuthorization2s: Array<Usdc_TransferWithAuthorization2call>;
  usdcCallUnBlacklists: Array<Usdc_UnBlacklistCall>;
  usdcCallUnpauses: Array<Usdc_UnpauseCall>;
  usdcCallUpdateBlacklisters: Array<Usdc_UpdateBlacklisterCall>;
  usdcCallUpdateMasterMinters: Array<Usdc_UpdateMasterMinterCall>;
  usdcCallUpdatePausers: Array<Usdc_UpdatePauserCall>;
  usdcCallUpdateRescuers: Array<Usdc_UpdateRescuerCall>;
  usdcCallUpgradeTos: Array<Usdc_UpgradeToCall>;
  usdcCallUpgradeToAndCalls: Array<Usdc_UpgradeToAndCallCall>;

  constructor(
    usdcCallApproves: Array<Usdc_ApproveCall> = [],
    usdcCallBlacklists: Array<Usdc_BlacklistCall> = [],
    usdcCallBurns: Array<Usdc_BurnCall> = [],
    usdcCallCancelAuthorization1s: Array<Usdc_CancelAuthorization1call> = [],
    usdcCallCancelAuthorization2s: Array<Usdc_CancelAuthorization2call> = [],
    usdcCallChangeAdmins: Array<Usdc_ChangeAdminCall> = [],
    usdcCallConfigureMinters: Array<Usdc_ConfigureMinterCall> = [],
    usdcCallDecreaseAllowances: Array<Usdc_DecreaseAllowanceCall> = [],
    usdcCallIncreaseAllowances: Array<Usdc_IncreaseAllowanceCall> = [],
    usdcCallInitializes: Array<Usdc_InitializeCall> = [],
    usdcCallInitializeV2s: Array<Usdc_InitializeV2call> = [],
    usdcCallInitializeV21s: Array<Usdc_InitializeV21call> = [],
    usdcCallInitializeV22s: Array<Usdc_InitializeV22call> = [],
    usdcCallMints: Array<Usdc_MintCall> = [],
    usdcCallPauses: Array<Usdc_PauseCall> = [],
    usdcCallPermit1s: Array<Usdc_Permit1call> = [],
    usdcCallPermit2s: Array<Usdc_Permit2call> = [],
    usdcCallReceiveWithAuthorization1s: Array<Usdc_ReceiveWithAuthorization1call> = [],
    usdcCallReceiveWithAuthorization2s: Array<Usdc_ReceiveWithAuthorization2call> = [],
    usdcCallRemoveMinters: Array<Usdc_RemoveMinterCall> = [],
    usdcCallRescueErc20s: Array<Usdc_RescueErc20call> = [],
    usdcCallTransfers: Array<Usdc_TransferCall> = [],
    usdcCallTransferFroms: Array<Usdc_TransferFromCall> = [],
    usdcCallTransferOwnerships: Array<Usdc_TransferOwnershipCall> = [],
    usdcCallTransferWithAuthorization1s: Array<Usdc_TransferWithAuthorization1call> = [],
    usdcCallTransferWithAuthorization2s: Array<Usdc_TransferWithAuthorization2call> = [],
    usdcCallUnBlacklists: Array<Usdc_UnBlacklistCall> = [],
    usdcCallUnpauses: Array<Usdc_UnpauseCall> = [],
    usdcCallUpdateBlacklisters: Array<Usdc_UpdateBlacklisterCall> = [],
    usdcCallUpdateMasterMinters: Array<Usdc_UpdateMasterMinterCall> = [],
    usdcCallUpdatePausers: Array<Usdc_UpdatePauserCall> = [],
    usdcCallUpdateRescuers: Array<Usdc_UpdateRescuerCall> = [],
    usdcCallUpgradeTos: Array<Usdc_UpgradeToCall> = [],
    usdcCallUpgradeToAndCalls: Array<Usdc_UpgradeToAndCallCall> = []
  ) {
    this.usdcCallApproves = usdcCallApproves;
    this.usdcCallBlacklists = usdcCallBlacklists;
    this.usdcCallBurns = usdcCallBurns;
    this.usdcCallCancelAuthorization1s = usdcCallCancelAuthorization1s;
    this.usdcCallCancelAuthorization2s = usdcCallCancelAuthorization2s;
    this.usdcCallChangeAdmins = usdcCallChangeAdmins;
    this.usdcCallConfigureMinters = usdcCallConfigureMinters;
    this.usdcCallDecreaseAllowances = usdcCallDecreaseAllowances;
    this.usdcCallIncreaseAllowances = usdcCallIncreaseAllowances;
    this.usdcCallInitializes = usdcCallInitializes;
    this.usdcCallInitializeV2s = usdcCallInitializeV2s;
    this.usdcCallInitializeV21s = usdcCallInitializeV21s;
    this.usdcCallInitializeV22s = usdcCallInitializeV22s;
    this.usdcCallMints = usdcCallMints;
    this.usdcCallPauses = usdcCallPauses;
    this.usdcCallPermit1s = usdcCallPermit1s;
    this.usdcCallPermit2s = usdcCallPermit2s;
    this.usdcCallReceiveWithAuthorization1s =
      usdcCallReceiveWithAuthorization1s;
    this.usdcCallReceiveWithAuthorization2s =
      usdcCallReceiveWithAuthorization2s;
    this.usdcCallRemoveMinters = usdcCallRemoveMinters;
    this.usdcCallRescueErc20s = usdcCallRescueErc20s;
    this.usdcCallTransfers = usdcCallTransfers;
    this.usdcCallTransferFroms = usdcCallTransferFroms;
    this.usdcCallTransferOwnerships = usdcCallTransferOwnerships;
    this.usdcCallTransferWithAuthorization1s =
      usdcCallTransferWithAuthorization1s;
    this.usdcCallTransferWithAuthorization2s =
      usdcCallTransferWithAuthorization2s;
    this.usdcCallUnBlacklists = usdcCallUnBlacklists;
    this.usdcCallUnpauses = usdcCallUnpauses;
    this.usdcCallUpdateBlacklisters = usdcCallUpdateBlacklisters;
    this.usdcCallUpdateMasterMinters = usdcCallUpdateMasterMinters;
    this.usdcCallUpdatePausers = usdcCallUpdatePausers;
    this.usdcCallUpdateRescuers = usdcCallUpdateRescuers;
    this.usdcCallUpgradeTos = usdcCallUpgradeTos;
    this.usdcCallUpgradeToAndCalls = usdcCallUpgradeToAndCalls;
  }
}
