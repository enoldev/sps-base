// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Usdc_AdminChanged } from "./Usdc_AdminChanged";
import { Usdc_Approval } from "./Usdc_Approval";
import { Usdc_AuthorizationCanceled } from "./Usdc_AuthorizationCanceled";
import { Usdc_AuthorizationUsed } from "./Usdc_AuthorizationUsed";
import { Usdc_Blacklisted } from "./Usdc_Blacklisted";
import { Usdc_BlacklisterChanged } from "./Usdc_BlacklisterChanged";
import { Usdc_Burn } from "./Usdc_Burn";
import { Usdc_MasterMinterChanged } from "./Usdc_MasterMinterChanged";
import { Usdc_Mint } from "./Usdc_Mint";
import { Usdc_MinterConfigured } from "./Usdc_MinterConfigured";
import { Usdc_MinterRemoved } from "./Usdc_MinterRemoved";
import { Usdc_OwnershipTransferred } from "./Usdc_OwnershipTransferred";
import { Usdc_Pause } from "./Usdc_Pause";
import { Usdc_PauserChanged } from "./Usdc_PauserChanged";
import { Usdc_RescuerChanged } from "./Usdc_RescuerChanged";
import { Usdc_Transfer } from "./Usdc_Transfer";
import { Usdc_UnBlacklisted } from "./Usdc_UnBlacklisted";
import { Usdc_Unpause } from "./Usdc_Unpause";
import { Usdc_Upgraded } from "./Usdc_Upgraded";

export class Events {
  static encode(message: Events, writer: Writer): void {
    const usdcAdminChangeds = message.usdcAdminChangeds;
    for (let i: i32 = 0; i < usdcAdminChangeds.length; ++i) {
      writer.uint32(10);
      writer.fork();
      Usdc_AdminChanged.encode(usdcAdminChangeds[i], writer);
      writer.ldelim();
    }

    const usdcApprovals = message.usdcApprovals;
    for (let i: i32 = 0; i < usdcApprovals.length; ++i) {
      writer.uint32(18);
      writer.fork();
      Usdc_Approval.encode(usdcApprovals[i], writer);
      writer.ldelim();
    }

    const usdcAuthorizationCanceleds = message.usdcAuthorizationCanceleds;
    for (let i: i32 = 0; i < usdcAuthorizationCanceleds.length; ++i) {
      writer.uint32(26);
      writer.fork();
      Usdc_AuthorizationCanceled.encode(usdcAuthorizationCanceleds[i], writer);
      writer.ldelim();
    }

    const usdcAuthorizationUseds = message.usdcAuthorizationUseds;
    for (let i: i32 = 0; i < usdcAuthorizationUseds.length; ++i) {
      writer.uint32(34);
      writer.fork();
      Usdc_AuthorizationUsed.encode(usdcAuthorizationUseds[i], writer);
      writer.ldelim();
    }

    const usdcBlacklisteds = message.usdcBlacklisteds;
    for (let i: i32 = 0; i < usdcBlacklisteds.length; ++i) {
      writer.uint32(42);
      writer.fork();
      Usdc_Blacklisted.encode(usdcBlacklisteds[i], writer);
      writer.ldelim();
    }

    const usdcBlacklisterChangeds = message.usdcBlacklisterChangeds;
    for (let i: i32 = 0; i < usdcBlacklisterChangeds.length; ++i) {
      writer.uint32(50);
      writer.fork();
      Usdc_BlacklisterChanged.encode(usdcBlacklisterChangeds[i], writer);
      writer.ldelim();
    }

    const usdcBurns = message.usdcBurns;
    for (let i: i32 = 0; i < usdcBurns.length; ++i) {
      writer.uint32(58);
      writer.fork();
      Usdc_Burn.encode(usdcBurns[i], writer);
      writer.ldelim();
    }

    const usdcMasterMinterChangeds = message.usdcMasterMinterChangeds;
    for (let i: i32 = 0; i < usdcMasterMinterChangeds.length; ++i) {
      writer.uint32(66);
      writer.fork();
      Usdc_MasterMinterChanged.encode(usdcMasterMinterChangeds[i], writer);
      writer.ldelim();
    }

    const usdcMints = message.usdcMints;
    for (let i: i32 = 0; i < usdcMints.length; ++i) {
      writer.uint32(74);
      writer.fork();
      Usdc_Mint.encode(usdcMints[i], writer);
      writer.ldelim();
    }

    const usdcMinterConfigureds = message.usdcMinterConfigureds;
    for (let i: i32 = 0; i < usdcMinterConfigureds.length; ++i) {
      writer.uint32(82);
      writer.fork();
      Usdc_MinterConfigured.encode(usdcMinterConfigureds[i], writer);
      writer.ldelim();
    }

    const usdcMinterRemoveds = message.usdcMinterRemoveds;
    for (let i: i32 = 0; i < usdcMinterRemoveds.length; ++i) {
      writer.uint32(90);
      writer.fork();
      Usdc_MinterRemoved.encode(usdcMinterRemoveds[i], writer);
      writer.ldelim();
    }

    const usdcOwnershipTransferreds = message.usdcOwnershipTransferreds;
    for (let i: i32 = 0; i < usdcOwnershipTransferreds.length; ++i) {
      writer.uint32(98);
      writer.fork();
      Usdc_OwnershipTransferred.encode(usdcOwnershipTransferreds[i], writer);
      writer.ldelim();
    }

    const usdcPauses = message.usdcPauses;
    for (let i: i32 = 0; i < usdcPauses.length; ++i) {
      writer.uint32(106);
      writer.fork();
      Usdc_Pause.encode(usdcPauses[i], writer);
      writer.ldelim();
    }

    const usdcPauserChangeds = message.usdcPauserChangeds;
    for (let i: i32 = 0; i < usdcPauserChangeds.length; ++i) {
      writer.uint32(114);
      writer.fork();
      Usdc_PauserChanged.encode(usdcPauserChangeds[i], writer);
      writer.ldelim();
    }

    const usdcRescuerChangeds = message.usdcRescuerChangeds;
    for (let i: i32 = 0; i < usdcRescuerChangeds.length; ++i) {
      writer.uint32(122);
      writer.fork();
      Usdc_RescuerChanged.encode(usdcRescuerChangeds[i], writer);
      writer.ldelim();
    }

    const usdcTransfers = message.usdcTransfers;
    for (let i: i32 = 0; i < usdcTransfers.length; ++i) {
      writer.uint32(130);
      writer.fork();
      Usdc_Transfer.encode(usdcTransfers[i], writer);
      writer.ldelim();
    }

    const usdcUnBlacklisteds = message.usdcUnBlacklisteds;
    for (let i: i32 = 0; i < usdcUnBlacklisteds.length; ++i) {
      writer.uint32(138);
      writer.fork();
      Usdc_UnBlacklisted.encode(usdcUnBlacklisteds[i], writer);
      writer.ldelim();
    }

    const usdcUnpauses = message.usdcUnpauses;
    for (let i: i32 = 0; i < usdcUnpauses.length; ++i) {
      writer.uint32(146);
      writer.fork();
      Usdc_Unpause.encode(usdcUnpauses[i], writer);
      writer.ldelim();
    }

    const usdcUpgradeds = message.usdcUpgradeds;
    for (let i: i32 = 0; i < usdcUpgradeds.length; ++i) {
      writer.uint32(154);
      writer.fork();
      Usdc_Upgraded.encode(usdcUpgradeds[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Events {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Events();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.usdcAdminChangeds.push(
            Usdc_AdminChanged.decode(reader, reader.uint32())
          );
          break;

        case 2:
          message.usdcApprovals.push(
            Usdc_Approval.decode(reader, reader.uint32())
          );
          break;

        case 3:
          message.usdcAuthorizationCanceleds.push(
            Usdc_AuthorizationCanceled.decode(reader, reader.uint32())
          );
          break;

        case 4:
          message.usdcAuthorizationUseds.push(
            Usdc_AuthorizationUsed.decode(reader, reader.uint32())
          );
          break;

        case 5:
          message.usdcBlacklisteds.push(
            Usdc_Blacklisted.decode(reader, reader.uint32())
          );
          break;

        case 6:
          message.usdcBlacklisterChangeds.push(
            Usdc_BlacklisterChanged.decode(reader, reader.uint32())
          );
          break;

        case 7:
          message.usdcBurns.push(Usdc_Burn.decode(reader, reader.uint32()));
          break;

        case 8:
          message.usdcMasterMinterChangeds.push(
            Usdc_MasterMinterChanged.decode(reader, reader.uint32())
          );
          break;

        case 9:
          message.usdcMints.push(Usdc_Mint.decode(reader, reader.uint32()));
          break;

        case 10:
          message.usdcMinterConfigureds.push(
            Usdc_MinterConfigured.decode(reader, reader.uint32())
          );
          break;

        case 11:
          message.usdcMinterRemoveds.push(
            Usdc_MinterRemoved.decode(reader, reader.uint32())
          );
          break;

        case 12:
          message.usdcOwnershipTransferreds.push(
            Usdc_OwnershipTransferred.decode(reader, reader.uint32())
          );
          break;

        case 13:
          message.usdcPauses.push(Usdc_Pause.decode(reader, reader.uint32()));
          break;

        case 14:
          message.usdcPauserChangeds.push(
            Usdc_PauserChanged.decode(reader, reader.uint32())
          );
          break;

        case 15:
          message.usdcRescuerChangeds.push(
            Usdc_RescuerChanged.decode(reader, reader.uint32())
          );
          break;

        case 16:
          message.usdcTransfers.push(
            Usdc_Transfer.decode(reader, reader.uint32())
          );
          break;

        case 17:
          message.usdcUnBlacklisteds.push(
            Usdc_UnBlacklisted.decode(reader, reader.uint32())
          );
          break;

        case 18:
          message.usdcUnpauses.push(
            Usdc_Unpause.decode(reader, reader.uint32())
          );
          break;

        case 19:
          message.usdcUpgradeds.push(
            Usdc_Upgraded.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  usdcAdminChangeds: Array<Usdc_AdminChanged>;
  usdcApprovals: Array<Usdc_Approval>;
  usdcAuthorizationCanceleds: Array<Usdc_AuthorizationCanceled>;
  usdcAuthorizationUseds: Array<Usdc_AuthorizationUsed>;
  usdcBlacklisteds: Array<Usdc_Blacklisted>;
  usdcBlacklisterChangeds: Array<Usdc_BlacklisterChanged>;
  usdcBurns: Array<Usdc_Burn>;
  usdcMasterMinterChangeds: Array<Usdc_MasterMinterChanged>;
  usdcMints: Array<Usdc_Mint>;
  usdcMinterConfigureds: Array<Usdc_MinterConfigured>;
  usdcMinterRemoveds: Array<Usdc_MinterRemoved>;
  usdcOwnershipTransferreds: Array<Usdc_OwnershipTransferred>;
  usdcPauses: Array<Usdc_Pause>;
  usdcPauserChangeds: Array<Usdc_PauserChanged>;
  usdcRescuerChangeds: Array<Usdc_RescuerChanged>;
  usdcTransfers: Array<Usdc_Transfer>;
  usdcUnBlacklisteds: Array<Usdc_UnBlacklisted>;
  usdcUnpauses: Array<Usdc_Unpause>;
  usdcUpgradeds: Array<Usdc_Upgraded>;

  constructor(
    usdcAdminChangeds: Array<Usdc_AdminChanged> = [],
    usdcApprovals: Array<Usdc_Approval> = [],
    usdcAuthorizationCanceleds: Array<Usdc_AuthorizationCanceled> = [],
    usdcAuthorizationUseds: Array<Usdc_AuthorizationUsed> = [],
    usdcBlacklisteds: Array<Usdc_Blacklisted> = [],
    usdcBlacklisterChangeds: Array<Usdc_BlacklisterChanged> = [],
    usdcBurns: Array<Usdc_Burn> = [],
    usdcMasterMinterChangeds: Array<Usdc_MasterMinterChanged> = [],
    usdcMints: Array<Usdc_Mint> = [],
    usdcMinterConfigureds: Array<Usdc_MinterConfigured> = [],
    usdcMinterRemoveds: Array<Usdc_MinterRemoved> = [],
    usdcOwnershipTransferreds: Array<Usdc_OwnershipTransferred> = [],
    usdcPauses: Array<Usdc_Pause> = [],
    usdcPauserChangeds: Array<Usdc_PauserChanged> = [],
    usdcRescuerChangeds: Array<Usdc_RescuerChanged> = [],
    usdcTransfers: Array<Usdc_Transfer> = [],
    usdcUnBlacklisteds: Array<Usdc_UnBlacklisted> = [],
    usdcUnpauses: Array<Usdc_Unpause> = [],
    usdcUpgradeds: Array<Usdc_Upgraded> = []
  ) {
    this.usdcAdminChangeds = usdcAdminChangeds;
    this.usdcApprovals = usdcApprovals;
    this.usdcAuthorizationCanceleds = usdcAuthorizationCanceleds;
    this.usdcAuthorizationUseds = usdcAuthorizationUseds;
    this.usdcBlacklisteds = usdcBlacklisteds;
    this.usdcBlacklisterChangeds = usdcBlacklisterChangeds;
    this.usdcBurns = usdcBurns;
    this.usdcMasterMinterChangeds = usdcMasterMinterChangeds;
    this.usdcMints = usdcMints;
    this.usdcMinterConfigureds = usdcMinterConfigureds;
    this.usdcMinterRemoveds = usdcMinterRemoveds;
    this.usdcOwnershipTransferreds = usdcOwnershipTransferreds;
    this.usdcPauses = usdcPauses;
    this.usdcPauserChangeds = usdcPauserChangeds;
    this.usdcRescuerChangeds = usdcRescuerChangeds;
    this.usdcTransfers = usdcTransfers;
    this.usdcUnBlacklisteds = usdcUnBlacklisteds;
    this.usdcUnpauses = usdcUnpauses;
    this.usdcUpgradeds = usdcUpgradeds;
  }
}
