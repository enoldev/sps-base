// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0

import { Writer, Reader } from "as-proto/assembly";
import { Events } from "./Events";
import { Calls } from "./Calls";

export class EventsCalls {
  static encode(message: EventsCalls, writer: Writer): void {
    const events = message.events;
    if (events !== null) {
      writer.uint32(10);
      writer.fork();
      Events.encode(events, writer);
      writer.ldelim();
    }

    const calls = message.calls;
    if (calls !== null) {
      writer.uint32(18);
      writer.fork();
      Calls.encode(calls, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): EventsCalls {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new EventsCalls();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.events = Events.decode(reader, reader.uint32());
          break;

        case 2:
          message.calls = Calls.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  events: Events | null;
  calls: Calls | null;

  constructor(events: Events | null = null, calls: Calls | null = null) {
    this.events = events;
    this.calls = calls;
  }
}
